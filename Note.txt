What is an API?
An API, or Application Programming Interface, is a programming interface that allows different programs to communicate with each other. Essentially, an API acts as an interface between software programs to share data and specific functions without having to know the internal details of each software program.

What is REST API?
REST API is an architectural style for designing web APIs that standardizes the communication between the client (API consumer) and the server (API provider).

REST API Principles
Uniform Interface
Each resource in the system should have only one URI (unique address) and these resources should be accessible through the same interface.

Client-Server
The client and server should be independent of each other. That is, they can change without depending on each other's code.

Stateless
Each request from the client to the server is independent, and the server does not keep any information about the state of the client.

Cacheable
Data can be cached on the client or server for better performance.

Layered System
The API can consist of multiple layers, so that the client does not know whether it is connected directly to the main server or through an intermediary layer.

Code on Demand (optional)
In special cases, the server can send executable code (such as JavaScript) to the client.

üîπ Comparison of different dependency injection methods in Spring:
1Ô∏è‚É£ Constructor Injection
Dependencies are initialized when the object is created.
Suitable for Required Dependencies.
Best method for Immutable Objects (objects that do not change after creation).
In terms of test writing and readability, it is preferable to other methods.

2Ô∏è‚É£ Field Injection
Applied directly to the field through annotation.
Reduces Boilerplate Code (does not require a setter or constructor method).
The problem with this method is that it makes testing harder, because it is not possible to initialize Mocks from the outside.

3Ô∏è‚É£ Setter Injection
Dependencies are initialized after the object is created.
Suitable for Optional Dependencies.
It allows changing the value of a dependency after initialization.
It is less readable than Constructor Injection and the object may remain in an invalid state.

‚ùå What is the problem with Invalid State?
If an object receives its necessary dependencies later than the time of its construction, it may be invalid and unusable until these dependencies are initialized.
Example: Problem with Setter Injection
Suppose we have a Shop class that requires a Manager to work. If the Manager is not initialized, the Shop methods cannot work properly.
üî¥ Here, if the openShop() method is executed before the manager is initialized, the program will throw a NullPointerException error because the manager is not initialized.

@Component
public class Shop {
    private Manager manager;

    @Autowired
    public void setManager(Manager manager) { 
        this.manager = manager;
    }

    public void openShop() {
        manager.manage(); 
    }
}

‚úÖ Solution: Use Constructor Injection
If dependencies are initialized through the constructor, the object will be in the correct state and ready to use from the very beginning.
‚úÖ In this method, since the manager value is initialized at the moment of Shop creation, it will never have a null value and the object will always remain in a valid state. üöÄ

@Component
public class Shop {
    private final Manager manager;

    @Autowired
    public Shop(Manager manager) { 
        this.manager = manager;
    }

    public void openShop() {
        manager.manage(); 
    }
}

Running JARs Standalone:
        - java -jar your-app.jar

Spring Boot uses Logback for log management by default.
To fine-tune the logs, we can place the logback-spring.xml file in the src/main/resources directory.

üîπ Key elements in Logback

1. Appender
Tells where logs should be stored.
ConsoleAppender: Display in console
FileAppender: Store in a file
RollingFileAppender: Store in files that can rotate automatically based on date or size (e.g. one new file daily)

2. Logger
Specifies what to log and at what level.
Can specify that only errors and warnings (error and warn) should be logged.
Can also specify which Appender to send the log to (or even to multiple Appenders at the same time)

üîπ Log Levels
From least important to most important:
TRACE
DEBUG
INFO
WARN
ERROR
üìå If the WARN level is enabled, only WARN and ERROR logs are recorded. The rest are ignored.

Two ways to prevent Git from tracking logs
1. Store logs outside the project
This will store logs outside the Git project path and Git will never see them.
2. Use .gitignore to ignore the logs folder

üîÅ JSON ‚Üî Java (Serialization/Deserialization)
POJO (Plain Old Java Object):
A simple Java class that only contains properties, getters, and setters. It may override toString(), equals(), hashCode().
Serialize (or Marshal):
Convert Java to JSON
‚Üí Jackson uses getters to put the value of each property into JSON.
Deserialize (or Unmarshal):
Convert JSON to Java
‚Üí Jackson must have setters and a no-arg constructor to do this.

‚úÖ Why do we need a parameterless constructor?
In Java, when we convert JSON to Java objects (for example, with Spring Boot), tools like Jackson are usually used.
In order for Jackson to be able to create a Java class from JSON, it needs:
1. There is a parameterless constructor (no-args constructor).
If we do not define any constructor ourselves, Java will create one by default.
But if we define a constructor with parameters, that default will not be created!
So we have to write it manually.
If there is an additional field in JSON (like price) but it is not in the Car class:
No problem.
Jackson ignores that field.
Because the Java class does not know what to do with it.
If a field that is in the class (like brand) but is not in JSON:
That field will have a null or default value (for example, 0 for int).

Elasticsearch is a very fast and powerful search engine that stores data in JSON and can search it very quickly.
Spring Data Elasticsearch provides a simpler layer for Java to communicate with Elasticsearch.
Instead of writing our own REST API, we can store, read, and delete data with just a few simple interfaces and annotations.

Cluster
A collection of one or more Nodes that work together. Each Cluster has a name and all Nodes in it are connected to each other.

Node
Each Node is actually a physical or virtual machine that Elasticsearch is running on.
For example, if you only have Elasticsearch installed on your laptop, you are working with a single node.

3. Index
The equivalent of Database table in traditional databases.
For example, you can have indexes called cars, users, products.
Each index contains multiple Documents.

4. Document
Each Document is a data record (like a row in a database table). It is stored as JSON.

Field
Each Document contains different fields; for example, brand, color, price, releaseDate.

Mapping
Specifies what data type each field is, you can define this mapping yourself or let Elasticsearch automatically guess (which is sometimes not accurate).

Important features of Elasticsearch
Real-time indexing & search: You can store and search data almost instantly.
Full-text search: Can do text searches like Google (even fuzzy and approximate).
Scalable & distributed: Can split data across multiple nodes.
RESTful API: Everything is done over HTTP.

üî∏ Value Type:
When you declare a variable of the Value Type type, the value itself is stored in memory.
When you assign it to another variable, a copy of the value is returned, not the original value itself.
üî∏ Reference Type:
In this case, the variable points to the address of an object in memory.
When you assign it to another variable, both point to the same address (object). This means that changing one will affect the other.

Value Types include:
int, float, double, boolean, char, byte, short, long
These are the primitive types.
Reference Types include:
All classes, arrays, interfaces, etc. For example, String, List, ArrayList, User, etc.

Converting Value Type to Reference Type (Boxing)
Even String in Java is a Reference Type, but because it is immutable (i.e. cannot be changed), it sometimes behaves like a Value Type.

Memory in Java: Stack vs Heap

üîπ Stack:
For temporary variables (such as local variables or method parameters).
Faster because its structure is like a stack (LIFO).
Primitive types such as int, double, char, etc. are stored here.
Its memory management is automatic and lightweight (they are cleared when the method exits).
üîπ Heap:
For objects such as classes and arrays.
Its management is done with the Garbage Collector.
Slower because addressing and memory management must be done.
Reference Types are stored here.

Now the concept of Boxing:
When you convert a primitive like int to Integer, in fact:
‚úÖ An object of type Integer is created on the Heap
‚ùó That is, instead of a simple value on the stack, now you have a complete object on the heap!
Why is the performance lower?
Accessing the Heap is slower because it has to look for its address.
The Garbage Collector has to manage them.
Every time you do boxing, a new object may be created.
In heavy numerical operations (like many loops), this creates a lot of objects in the Heap ‚Üí high memory ‚Üí GC pressure ‚Üí reduced performance.

But what about Primitives?
These are stored directly on the Stack.
No need for GC, Heap searches, or new object creation.
High speed, better performance, and less memory consumption.

This project uses Spring Data Elasticsearch.
When Spring Data is storing data in Elasticsearch, it needs to know exactly which Java class this JSON represents in order to properly deserialize it later.

üîµ For this reason, Spring Data stores a special field called _class in each document that holds the full name of the class.

If you save the data via a Spring Boot Application (e.g. with CarRepository.save(car)), Spring will add this _class field itself.
But when you make a request directly from Postman or a manual API, you have to manually provide this field in the JSON.

{
  "query": {
    "bool": {
      "must": [
        { "match": { "brand": "toyota" } },
        { "match": { "color": "red" } }
      ]
    }
  },
  "size": 3,
  "from": 0
}

query.bool.must : Both conditions must be met (both brand Toyota and color red)
match: full-text search (not exactly the same, but parsed)
size: 3 Return a maximum of 3 results
from: 0 Start from result number 0 (for pagination)

Want to know:
Which APIs are used a lot?
Which ones are slow?
And what is the overall health of the API?

üîß Tools we use:
Spring Boot Actuator: Collect health information and metrics
Micrometer: Send data to Elasticsearch
Elasticsearch: Store data
Kibana: Display and analyze data graphically
Postman: Generate load on the API to collect enough data

